{% include ../_includes/header.liquid %}

<script src="socket.io-file-client.js"></script> 
<script>
var _updating = false;
var socket = io();

// Listen to internet connectivity status updates from the backend
// Disable features that require backend internet connectivity when
// there is no connection
socket.on('internet status', function(data) {
	console.log('got internet status', data);
	if(_updating) {
		return; // Don't enable buttons until update is complete
	}
	enableInternetUpdates(data);
});

// Listen to RAM and CPU usage stats
socket.on('cpu stats', function(data) {
	console.log('got cpu status', data);
});

// listen to SoC temperature info
socket.on('soc temperature', function(data) {
	console.log('got SoC temperature', data);
	document.getElementById('socTemperature').innerHTML = data;
});

socket.on('terminal output', function(data) {
	var terminalEl = document.getElementById("terminal-output");
	var html = terminalEl.innerHTML + data;
	var autoscroll = terminalEl.scrollHeight - terminalEl.scrollTop
		=== terminalEl.clientHeight;
	terminalEl.innerHTML = html.replace(/\n.*?\r/g, "\n");
	if (autoscroll) {
		terminalEl.scrollTop = terminalEl.scrollHeight;
	}
});

socket.on('companion version', function(data) {
	document.getElementById('companion version').innerHTML = data;
});

socket.on('ardusub version', function(data) {
	console.log(data);
	document.getElementById('ardusub version').innerHTML = data;
});

socket.on('companion latest', function(data) {
	console.log('got companion latest');
	document.getElementById('companionButton').style.display = "inline";
	document.getElementById('companionAvailable').innerHTML = "Download Update: An Update is Available!";
});

function updateCompanion(fileInfo) {
	if (fileInfo) {
		document.getElementById('companionProgress').innerHTML = "";
		uploader.off('stream', companionProgress);
		uploader.off('complete', updateCompanion);
		socket.emit('update companion', fileInfo.name);
	} else {
		socket.emit('update companion');
	}
	_updating = true;
	enableUpdates(false);
	showCompanionSpinner(true);
}

function companionProgress(fileInfo) {
	document.getElementById('companionProgress').innerHTML = 'Uploading: ' + fileInfo.sent + '/' + fileInfo.size + ' byte(s)';
}

function updatePixhawkFile(fileInfo) {
	document.getElementById('pixhawkProgress').innerHTML = "";
	uploader.off('stream', pixhawkProgress);
	uploader.off('complete', updatePixhawkFile);
	socket.emit('update pixhawk', {
		'option': 'file',
		'file': fileInfo.name
	});
}

function updatePixhawk(option) {
	_updating = true;
	enableUpdates(false);
	showPixhawkSpinner(true);
	socket.emit('update pixhawk', {
		'option' : option
	});
}

function pixhawkProgress(fileInfo) {
	document.getElementById('pixhawkProgress').innerHTML = 'Uploading: ' + fileInfo.sent + '/' + fileInfo.size + ' byte(s)';
}

socket.on('pixhawk update complete', function(data) {
	_updating = false;
	enableUpdates(true);
	showPixhawkSpinner(false);
	socket.emit('get ardusub version');
});

socket.on('companion update complete', function(data) {
	_updating = false;
	enableUpdates(true);
	showCompanionSpinner(false);
});

function enableInternetUpdates(enabled) {
	document.getElementById('companionButton').disabled = !enabled;
	document.getElementById('devButton').disabled = !enabled;
	document.getElementById('betaButton').disabled = !enabled;
	document.getElementById('stableButton').disabled = !enabled;
}

function enableUpdates(enabled) {
	enableInternetUpdates(enabled);
	document.getElementById('pixhawkFileButton').disabled = !enabled;
}

function showCompanionSpinner(show) {
	document.getElementById('companionSpinner').style.visibility = show ? "visible" : "hidden";
}

function showPixhawkSpinner(show) {
	document.getElementById('pixhawkSpinner').style.visibility = show ? "visible" : "hidden";
}

socket.emit('get companion version');
socket.emit('get companion latest');
socket.emit('get ardusub version');

var uploader = new SocketIOFileClient(socket);

uploader.on('start', function(fileInfo) {
	console.log('Start uploading', fileInfo);
});
uploader.on('stream', function(fileInfo) {
	console.log('Streaming... sent ' + fileInfo.sent + ' bytes.');
});
uploader.on('complete', function(fileInfo) {
	console.log('Upload Complete', fileInfo);
});
uploader.on('error', function(err) {
	console.log('Error!', err);
	enableUpdates(true);
	showPixhawkSpinner(false);
	showCompanionSpinner(false);
	
	uploader.off('stream', pixhawkProgress);
	uploader.off('complete', updatePixhawkFile);
	
	uploader.off('stream', companionProgress);
	uploader.off('complete', updateCompanion);
});
uploader.on('abort', function(fileInfo) {
	console.log('Aborted: ', fileInfo);
});

function submit(onComplete, onStream, fileElement) {
	var fileEl = document.getElementById(fileElement);
	var uploadIds = uploader.upload(fileEl);
	console.log(fileEl.value);
	
	if (!fileEl.value) {
		console.log('No file selected!');
		return false;
	}
	
	enableUpdates(false);
	if (fileElement == 'pixhawkFile') {
		showPixhawkSpinner(true);
	} else {
		showCompanionSpinner(true);
	}
	
	uploader.on('complete', onComplete);
	uploader.on('stream', onStream);
};

// Set width of all "dynamic-parent-width" elements to parent width
function resizeDynamicWidthElement() {
    var elements = document.getElementsByClassName("dynamic-parent-width");
    for (i=0; i<elements.length; i++) {
        elements[i].style.width = elements[i].parentElement.clientWidth + "px";
    }
}

// Create event listener to dynamically resize elements when page is resized
window.addEventListener('resize', resizeDynamicWidthElement);

window.addEventListener("DOMContentLoaded", function() {
	resizeDynamicWidthElement();
});

function restoreFw() {
	if (confirm("Are you sure you want to reset ArduSub firmware to "
		+ "factory default?")) {
		document.getElementById('restore fw').disabled = true;
		socket.emit('restore px fw');
	}
}

function restoreParams() {
	if (confirm("Are you sure you want to reset ArduSub parameters to "
		+ "factory default?")) {
		document.getElementById('restore params').disabled = true;
		socket.emit('restore px params');
	}
}

function rebootPixhawk() {
	if (confirm("Are you sure you want to reboot the Pixhawk ?")) {
		document.getElementById('reboot pixhawk').disabled = true;
		socket.emit('reboot px');
	}
}

socket.on('restore px fw complete', function(data){
	document.getElementById('restore fw').disabled = false;
	socket.emit('get ardusub version');
});

socket.on('restore px params complete', function(data){
	document.getElementById('restore params').disabled = false;
});

socket.on('reboot px complete', function(data){
	document.getElementById('reboot pixhawk').disabled = false;
});

// Listen to RAM and CPU usage stats
socket.on('cpu stats', function(data) {
	// make cpu load display with one decimal point if less than 10.
	var _cpu_load;
	if (Math.abs(data.cpu_load) < 10) {
		_cpu_load = data.cpu_load.toFixed(1);
	} else {
		_cpu_load = data.cpu_load.toFixed(0);
	}

	// display data
	var ram_percentage = (data.ram_used/data.ram_total * 100).toFixed(0);
	document.getElementById('ramFree').innerHTML = data.ram_used.toFixed(0) + 'MB/' + data.ram_total.toFixed(0) + 'MB (' + ram_percentage+ '% used)';

	document.getElementById('cpuLoad').innerHTML = _cpu_load + '%';

	var disk_used = (data.disk_used/1048576).toFixed(1)
	var disk_total = (data.disk_total/1048576).toFixed(1)
	document.getElementById('diskStatus').innerHTML = disk_used + 'GB/' + disk_total + 'GB  (' + data.disk_use_percentage + ' used)';

	document.getElementById('cpuStatus').innerHTML = data.cpu_status;

	document.getElementById('uptime').innerHTML = data.uptime;
});
</script>



<script>
    var companionDevices =
    {

        "Video" : {
            "searchPattern":"/dev/video*",
            "devices": {}
        },
        "Audio" : {
            "searchPattern":"/dev/snd/*",
            "devices": {}
        },
        "Serial" : {
            "searchPattern":"/dev/serial/by-id/*",
            "devices": {}
        }
    }

    function queryUdevadm(pattern, callback) {
        var xhr = new XMLHttpRequest();
        var query = "?pattern=" + pattern;
        console.log("query", query);

        xhr.open("GET", "/udevadm" + query, true);

        xhr.addEventListener("readystatechange", callback, true);
        xhr.send();
    }

    function handleUdevadmResponse(deviceType, response) {
        // response.target refers to the XMLHttpRequest object ('xhr')
        // wait for readyState == 4 ~ "Done"
        if (response.target.readyState != 4) {
            return null;
        }

        console.log("got udevadm query response", deviceType, response);

        usbInfo = JSON.parse(response.target.response);
        
        var deviceList = {};

        for (device in usbInfo.devices) {
            var deviceInfo = usbInfo.devices[device];

            var modelInfo = deviceInfo["udevInfo"]["ID_MODEL"];

            if (!modelInfo) {
                modelInfo = deviceInfo["udevInfo"]["ID_V4L_PRODUCT"]; // pi camera does not have ID_MODEL
            }

            if (modelInfo) {
                if (modelInfo in deviceList === false) {
                    deviceList[modelInfo] = deviceInfo["companionDevice"];
                }
            }
        }

        companionDevices[deviceType].devices = deviceList;

        updateDeviceContent();
    }

    // TODO figure this out w simpler? css
    function updateDeviceContent() {
        var deviceContent = document.getElementById("deviceContent");

        // clear existing content
        while (deviceContent.hasChildNodes()) {
            deviceContent.removeChild(deviceContent.lastChild);
        }

        for (deviceType in companionDevices) {
            var h = document.createElement("h5");
            h.innerHTML = deviceType + " Devices:";

            var ul = document.createElement("ul");
            for (device in companionDevices[deviceType]["devices"])
            {
                var li = document.createElement("li");
                var companionString = "";
                if (companionDevices[deviceType]["devices"][device]) {
                    companionString = " (" + companionDevices[deviceType]["devices"][device] + ")";
                }
                li.innerHTML = device + companionString;
                ul.appendChild(li);
            }

            if (!ul.hasChildNodes()) {
                h.innerHTML += " None!";
            }

            deviceContent.appendChild(h);
            deviceContent.appendChild(ul);
        }
    }

    function queryAllDeviceTypes() {
        for (let deviceType in companionDevices) {
            queryUdevadm(companionDevices[deviceType].searchPattern, function(response) {
                handleUdevadmResponse(deviceType, response);
            });
        }
    }

    queryAllDeviceTypes();

    setInterval(queryAllDeviceTypes, 3000);
</script>

<script>
   var companionScreens = {
        "pi" : []
    }

    function queryScreens(user, callback) {
        var xhr = new XMLHttpRequest();
        var query = "?user=" + user;
        console.log("query", query);

        xhr.open("GET", "/screen" + query, true);

        xhr.addEventListener("readystatechange", callback, true);
        xhr.send();
    }

    function handleScreensResponse(user, response) {
        if (response.target.readyState != 4) {
            return null;
        }

        console.log("got screens query response", user, response);

        jsonReply = JSON.parse(response.target.response);
        
        companionScreens[jsonReply.user] = jsonReply.screens

        updateScreensContent();
    }

    // TODO figure this out w simpler? css
    function updateScreensContent() {
        var screenContent = document.getElementById("screenContent");
        while (screenContent.hasChildNodes()) {
            screenContent.removeChild(screenContent.lastChild);
        }
        for (user in companionScreens) {
            var ul = document.createElement("ul");
            for (screen in companionScreens[user])
            {
                var li = document.createElement("li");

                li.innerHTML = companionScreens[user][screen]["idName"];

                ul.appendChild(li);
            }
            screenContent.appendChild(ul);
        }
    }

    function queryAllScreens() {
        for (let user in companionScreens) {
            queryScreens(user, function (response) {
                handleScreensResponse(user, response);
            });
        }
    }

    queryAllScreens();

    setInterval(queryAllScreens, 3000);
</script>

<h1>Software Status and Update</h1>
<!-- Companion Computer Status -->
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Companion Computer Status
				</h3>
			</div>
			<div class="panel-body">
				<dl class="dl-horizontal">
					<dt>Uptime: </dt>
						<dd id="uptime"></dd>
					<dt>CPU Load: </dt>
						<dd id="cpuLoad"></dd>
					<dt>RAM: Usage</dt>
						<dd id="ramFree"></dd>
					<dt>Disk Usage: </dt>
						<dd id="diskStatus"></dd>
					<dt>SoC Temperature: </dt>
						<dd id="socTemperature"></dd>
					<dt>CPU Status: </dt>
						<dd id="cpuStatus"></dd>
				</dl>
            </div>
        </div>
    </div>
</div>
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Active Services
				</h3>
			</div>
			<div class="panel-body">
				<dl class="dl-horizontal">
					<div id="screenContent"></div>
				</dl>
            </div>
        </div>
    </div>
</div>
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Detected Devices
				</h3>
			</div>
			<div class="panel-body">
				<dl class="dl-horizontal">
            		<div id="deviceContent"></div>
				</dl>
            </div>
        </div>
    </div>
</div>
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Companion Software Status
					<i id="companionSpinner" class="fa fa-refresh fa-spin fa-2x fa-fw" style="visibility:hidden;"></i>
					<span id="companionProgress"></span>
				</h3>
			</div>
			<div class="panel-body">
				<h4>Version: </h4>
				<span id="companion version">Companion Version</span>
				<div>
					<h4 id="companionAvailable">Download Update: No Updates Available</h4>
					<button id="companionButton" type="button" class="btn btn-primary" onclick="updateCompanion()" style="display:none" disabled=true>Update</button>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					Pixhawk Firmware Update
					<i id="pixhawkSpinner" class="fa fa-refresh fa-spin fa-2x fa-fw" style="visibility:hidden;"></i>
					<span id="pixhawkProgress"></span>
				</h3>
			</div>
			<div class="panel-body">
				<div>
					<h4> ArduSub Version: </h4>
					<span id="ardusub version"></span>
					<h4>Download and Update (Requires Internet Connection):</h4>
					<button id="devButton" type="button" class="btn btn-primary" onclick="updatePixhawk('dev')" disabled=true>Development</button>
					<button id="betaButton" type="button" class="btn btn-primary" onclick="updatePixhawk('beta')" disabled=true>Beta</button>
					<button id="stableButton" type="button" class="btn btn-primary" onclick="updatePixhawk('stable')" disabled=true>Stable</button>
				</div>
				<div>
					<h4>Upload Firmware File:</h4>
					<input id="pixhawkFileButton" type="submit" class="btn btn-primary" value="Upload" onClick="submit(updatePixhawkFile, pixhawkProgress, 'pixhawkFile')" style="display:table-cell"/>
					<input type="file" id="pixhawkFile" style="display:table-cell" enabled/>

					<h4>Restore Factory Defaults</h4>
					<button type="button" class="btn btn-primary"
						id="restore fw" onclick="restoreFw()">
						Restore Default Firmware</button>
					<button type="button" class="btn btn-primary"
						id="restore params" onclick="restoreParams()">
						Restore Default Parameters</button>

					<h4>Reboot Pixhawk</h4>
					<button type="button" class="btn btn-primary"
						id="reboot pixhawk" onclick="rebootPixhawk()">
						🔃</button>
				</div>
				<br />
				<div>
				<textarea rows="20" cols="120" id="terminal-output"
					style="font-family:monospace; resize: vertical"
					class="dynamic-parent-width" readonly></textarea>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="row">
	<div class="col-md-12">
		<div class="panel panel-default">
			<div class="panel-heading">
				<h3 class="panel-title">
					System Log
				</h3>
			</div>
			<div class="panel-body">
				<a href="/webui.log" download>
				<button type="button" class="btn btn-primary" style="height: 35px; width: 185px; display:table-cell">
					Download System Log
				</button>
				</a>
			</div>
		</div>
	</div>
</div>

{% include ../_includes/footer.liquid %}
